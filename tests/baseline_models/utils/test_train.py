import pytest
import torch

from real_time_vlm_benchmark.baseline_models.utils.train import (
    construct_interleaved_dialogue_for_training,
    generate_labels,
    generate_real_time_labels,
)


@pytest.mark.parametrize(
    "dialogue,frame_timestamps,expected",
    [
        (
            [
                {"role": "system", "content": "another system message"},
                {"role": "assistant", "start": 3},
                {"role": "assistant", "start": 5},
                {"role": "assistant", "start": 8},
            ],
            torch.arange(3, 8.5, 0.5).tolist(),
            (
                [
                    {"role": "system", "content": "system message"},
                    {"role": "stream", "num_frames": 1},
                    {"role": "assistant", "start": 3},
                    {"role": "stream", "num_frames": 4},
                    {"role": "assistant", "start": 5},
                    {"role": "stream", "num_frames": 6},
                    {"role": "assistant", "start": 8},
                ],
                11,
            ),
        ),
        (
            [
                {"role": "system", "content": "another system message"},
                {"role": "assistant", "start": 3},
                {"role": "assistant", "start": 5},
                {"role": "assistant", "start": 8},
            ],
            torch.arange(4, 8.5, 0.5).tolist(),
            (
                [
                    {"role": "system", "content": "system message"},
                    {"role": "stream", "num_frames": 3},
                    {"role": "assistant", "start": 5},
                    {"role": "stream", "num_frames": 6},
                    {"role": "assistant", "start": 8},
                ],
                9,
            ),
        ),
    ],
)
def test_construct_interleaved_dialogue(
    dialogue: list[dict],
    frame_timestamps: list[float],
    expected: list[dict],
) -> None:
    assert (
        construct_interleaved_dialogue_for_training(
            dialogue, frame_timestamps, lambda x: "system message"
        )
        == expected
    )


@pytest.mark.parametrize(
    "input_ids,expected_input_ids,expected_labels",
    [
        # NOTE: 128000 is bos_token_id
        (
            torch.tensor([128000, 11, 128009]),
            torch.tensor([128000, 11]),
            torch.tensor([-100, -100]),
        ),
        (
            torch.tensor([128000, 128256, 128256, 11, 128256, 128256, 128009]),
            torch.tensor([128000, 128256, 128256, 11, 128256, 128256]),
            torch.tensor([-100, -100, 11, -100, -100, -100]),
        ),
        (
            torch.tensor([128000, 933, 72803, 25, 0, 1, 2, 128009]),
            torch.tensor([128000, 933, 72803, 25, 0, 1, 2]),
            torch.tensor([933, 72803, 25, 0, 1, 2, 128009]),
        ),
        (
            torch.tensor(
                [
                    128000,
                    43296,
                    382,
                    58,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    11,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    933,
                    1502,
                    25,
                    7155,
                    5380,
                    72803,
                    25,
                    7155,
                    13,
                    128009,
                    198,
                    58,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    11,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    11,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    933,
                    72803,
                    25,
                    779,
                    7155,
                    13,
                    128009,
                ]
            ),
            torch.tensor(
                [
                    128000,
                    43296,
                    382,
                    58,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    11,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    933,
                    1502,
                    25,
                    7155,
                    5380,
                    72803,
                    25,
                    7155,
                    13,
                    128009,
                    198,
                    58,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    11,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    11,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    128256,
                    933,
                    72803,
                    25,
                    779,
                    7155,
                    13,
                ]
            ),
            torch.tensor(
                [
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    11,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    72803,
                    25,
                    7155,
                    13,
                    128009,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    11,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    11,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    933,
                    72803,
                    25,
                    779,
                    7155,
                    13,
                    128009,
                ]
            ),
        ),
    ],
)
def test_generate_labels(
    input_ids: torch.Tensor,
    expected_input_ids: torch.Tensor,
    expected_labels: torch.Tensor,
) -> None:
    eos_token_id = 128009
    v_placeholder_id = 128256
    frame_token_interval_id = 11
    stream_generation_prompt_ids = torch.tensor([933, 72803, 25])
    shifted_input_ids, labels = generate_labels(
        input_ids,
        frame_token_interval_id,
        v_placeholder_id,
        stream_generation_prompt_ids,
        eos_token_id,
    )
    assert shifted_input_ids.equal(expected_input_ids)
    assert labels.equal(expected_labels)


@pytest.mark.parametrize(
    "input_ids,expected_input_ids,expected_labels",
    [
        # NOTE: 128000 is bos_token_id
        (
            torch.tensor([128000, 0, 128009]),
            torch.tensor([128000, 0]),
            torch.tensor([-100, -100]),
        ),
        (
            torch.tensor([128000, 198, 72803, 25, 0, 1, 2, 128009]),
            torch.tensor([128000, 198, 72803, 25, 0, 1, 2]),
            torch.tensor([198, 72803, 25, 0, 1, 2, 128009]),
        ),
        (
            torch.tensor(
                [
                    128000,
                    9125,
                    1984,
                    198,
                    128256,
                    128256,
                    128256,
                    198,
                    1502,
                    25,
                    128256,
                    1217,
                    22256,
                    128256,
                    685,
                    220,
                    15,
                    128256,
                    128256,
                    198,
                    72803,
                    25,
                    128256,
                    18328,
                    22256,
                    128256,
                    685,
                    220,
                    128256,
                    15,
                    128009,
                ]
            ),
            torch.tensor(
                [
                    128000,
                    9125,
                    1984,
                    198,
                    128256,
                    128256,
                    128256,
                    198,
                    1502,
                    25,
                    128256,
                    1217,
                    22256,
                    128256,
                    685,
                    220,
                    15,
                    128256,
                    128256,
                    198,
                    72803,
                    25,
                    128256,
                    18328,
                    22256,
                    128256,
                    685,
                    220,
                    128256,
                    15,
                ]
            ),
            torch.tensor(
                [
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    -100,
                    198,
                    72803,
                    25,
                    -100,
                    18328,
                    22256,
                    -100,
                    685,
                    220,
                    -100,
                    15,
                    128009,
                ]
            ),
        ),
    ],
)
def test_generate_real_time_labels(
    input_ids: torch.Tensor,
    expected_input_ids: torch.Tensor,
    expected_labels: torch.Tensor,
) -> None:
    eos_token_id = 128009
    v_placeholder_id = 128256
    stream_generation_prompt_ids = torch.tensor([198, 72803, 25])
    shifted_input_ids, labels = generate_real_time_labels(
        input_ids,
        v_placeholder_id,
        stream_generation_prompt_ids,
        eos_token_id,
    )
    assert shifted_input_ids.equal(expected_input_ids)
    assert labels.equal(expected_labels)
